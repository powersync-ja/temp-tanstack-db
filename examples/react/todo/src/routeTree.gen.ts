/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TrailbaseRouteImport } from './routes/trailbase'
import { Route as QueryRouteImport } from './routes/query'
import { Route as ElectricRouteImport } from './routes/electric'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiTodosRouteImport } from './routes/api/todos'
import { Route as ApiConfigRouteImport } from './routes/api/config'
import { Route as ApiTodosIdRouteImport } from './routes/api/todos.$id'
import { Route as ApiConfigIdRouteImport } from './routes/api/config.$id'

const TrailbaseRoute = TrailbaseRouteImport.update({
  id: '/trailbase',
  path: '/trailbase',
  getParentRoute: () => rootRouteImport,
} as any)
const QueryRoute = QueryRouteImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => rootRouteImport,
} as any)
const ElectricRoute = ElectricRouteImport.update({
  id: '/electric',
  path: '/electric',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTodosRoute = ApiTodosRouteImport.update({
  id: '/api/todos',
  path: '/api/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiConfigRoute = ApiConfigRouteImport.update({
  id: '/api/config',
  path: '/api/config',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTodosIdRoute = ApiTodosIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiTodosRoute,
} as any)
const ApiConfigIdRoute = ApiConfigIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiConfigRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/electric': typeof ElectricRoute
  '/query': typeof QueryRoute
  '/trailbase': typeof TrailbaseRoute
  '/api/config': typeof ApiConfigRouteWithChildren
  '/api/todos': typeof ApiTodosRouteWithChildren
  '/api/config/$id': typeof ApiConfigIdRoute
  '/api/todos/$id': typeof ApiTodosIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/electric': typeof ElectricRoute
  '/query': typeof QueryRoute
  '/trailbase': typeof TrailbaseRoute
  '/api/config': typeof ApiConfigRouteWithChildren
  '/api/todos': typeof ApiTodosRouteWithChildren
  '/api/config/$id': typeof ApiConfigIdRoute
  '/api/todos/$id': typeof ApiTodosIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/electric': typeof ElectricRoute
  '/query': typeof QueryRoute
  '/trailbase': typeof TrailbaseRoute
  '/api/config': typeof ApiConfigRouteWithChildren
  '/api/todos': typeof ApiTodosRouteWithChildren
  '/api/config/$id': typeof ApiConfigIdRoute
  '/api/todos/$id': typeof ApiTodosIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/electric'
    | '/query'
    | '/trailbase'
    | '/api/config'
    | '/api/todos'
    | '/api/config/$id'
    | '/api/todos/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/electric'
    | '/query'
    | '/trailbase'
    | '/api/config'
    | '/api/todos'
    | '/api/config/$id'
    | '/api/todos/$id'
  id:
    | '__root__'
    | '/'
    | '/electric'
    | '/query'
    | '/trailbase'
    | '/api/config'
    | '/api/todos'
    | '/api/config/$id'
    | '/api/todos/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ElectricRoute: typeof ElectricRoute
  QueryRoute: typeof QueryRoute
  TrailbaseRoute: typeof TrailbaseRoute
  ApiConfigRoute: typeof ApiConfigRouteWithChildren
  ApiTodosRoute: typeof ApiTodosRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/trailbase': {
      id: '/trailbase'
      path: '/trailbase'
      fullPath: '/trailbase'
      preLoaderRoute: typeof TrailbaseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/query': {
      id: '/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof QueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/electric': {
      id: '/electric'
      path: '/electric'
      fullPath: '/electric'
      preLoaderRoute: typeof ElectricRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/todos': {
      id: '/api/todos'
      path: '/api/todos'
      fullPath: '/api/todos'
      preLoaderRoute: typeof ApiTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/config': {
      id: '/api/config'
      path: '/api/config'
      fullPath: '/api/config'
      preLoaderRoute: typeof ApiConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/todos/$id': {
      id: '/api/todos/$id'
      path: '/$id'
      fullPath: '/api/todos/$id'
      preLoaderRoute: typeof ApiTodosIdRouteImport
      parentRoute: typeof ApiTodosRoute
    }
    '/api/config/$id': {
      id: '/api/config/$id'
      path: '/$id'
      fullPath: '/api/config/$id'
      preLoaderRoute: typeof ApiConfigIdRouteImport
      parentRoute: typeof ApiConfigRoute
    }
  }
}

interface ApiConfigRouteChildren {
  ApiConfigIdRoute: typeof ApiConfigIdRoute
}

const ApiConfigRouteChildren: ApiConfigRouteChildren = {
  ApiConfigIdRoute: ApiConfigIdRoute,
}

const ApiConfigRouteWithChildren = ApiConfigRoute._addFileChildren(
  ApiConfigRouteChildren,
)

interface ApiTodosRouteChildren {
  ApiTodosIdRoute: typeof ApiTodosIdRoute
}

const ApiTodosRouteChildren: ApiTodosRouteChildren = {
  ApiTodosIdRoute: ApiTodosIdRoute,
}

const ApiTodosRouteWithChildren = ApiTodosRoute._addFileChildren(
  ApiTodosRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ElectricRoute: ElectricRoute,
  QueryRoute: QueryRoute,
  TrailbaseRoute: TrailbaseRoute,
  ApiConfigRoute: ApiConfigRouteWithChildren,
  ApiTodosRoute: ApiTodosRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
